#!/bin/bash
set -e

# Note: if your LLVM binaries have a version suffix (such as `llvm-link-9`),
# set the `LLVM_SUFFIX` environment variable (e.g. `LLVM_SUFFIX=-9`).

# Set DRIVER_CFLAGS=-DSILENT to suppress driver logging output, which reduces
# syscalls.

# Build only the libraries we actually need.
make -j8 libavcodec/libavcodec.a libavformat/libavformat.a libavutil/libavutil.a

# Build the driver program.
clang -flto -c CVE-2013-0864/driver.c -I . $DRIVER_CFLAGS

# Unpack bitcode from the library files
mkdir -p work
cd work
for f in libavformat libavcodec libavutil; do
    mkdir -p $f
    (cd $f; ar x ../../$f/$f.a)
done
# Remove duplicate objects - otherwise we get symbol conflicts
rm libavcodec/log2_tab.o libavformat/log2_tab.o
cd ..

# Link the full libs + driver into a single bitcode file
llvm-link${LLVM_SUFFIX} -o driver-full.bc driver.o work/*/*.o

# Optimize, removing unused public symbols
opt${LLVM_SUFFIX} \
    --internalize --internalize-public-api-list=main \
    -O3 -o driver-opt.bc driver-full.bc
# driver-opt.bc is the final LLVM output.

# Produce an executable
clang -o driver driver-opt.bc -static -lm -lpthread

