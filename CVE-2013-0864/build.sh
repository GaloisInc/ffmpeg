#!/bin/bash
set -e

FFMPEG_DIR="$(dirname "$0")/.."
PICOLIBC_HOME="$FFMPEG_DIR/../picolibc/build/image/picolibc/x86_64-unknown-fromager"
CLANG_DIR="$(clang${LLVM_SUFFIX} -print-resource-dir)"

CFLAGS="-flto -mprefer-vector-width=1
    -nostdinc
    -isystem $CLANG_DIR/include
    -isystem $PICOLIBC_HOME/include
    -ggdb
    "

# Note: if your LLVM binaries have a version suffix (such as `llvm-link-9`),
# set the `LLVM_SUFFIX` environment variable (e.g. `LLVM_SUFFIX=-9`).

# Set DRIVER_CFLAGS=-DSILENT to suppress driver logging output, which reduces
# syscalls.

cc_instrument=
strip_debug=--strip-debug
if [ -n "$CC_INSTRUMENT" ]; then
    cc_instrument=--cc-instrument
fi
if [ -n "$DEBUG" ]; then
    strip_debug=''
    # --cc-instrument doesn't add the necessary debug info, causing an error
    # when debug info is not stripped.
    cc_instrument=''
fi


# Common build steps

# Build only the libraries we actually need.
make -j8 libavcodec/libavcodec.a libavformat/libavformat.a libavutil/libavutil.a

mkdir -p build/fromager
# Build the driver program.
clang${LLVM_SUFFIX} -c CVE-2013-0864/driver.c -o build/fromager/driver.o \
    $CFLAGS -I . $DRIVER_CFLAGS
clang${LLVM_SUFFIX} -c CVE-2013-0864/driver_heap.c -o build/fromager/driver_heap.o \
    $CFLAGS -I . $DRIVER_CFLAGS
clang${LLVM_SUFFIX} -c CVE-2013-0864/driver_secret.c -o build/fromager/driver_secret.bc \
    $CFLAGS -I . $DRIVER_CFLAGS
clang${LLVM_SUFFIX} -c CVE-2013-0864/cc_trace_exec.c -o build/fromager/cc_trace_exec.bc \
    $CFLAGS -I . $DRIVER_CFLAGS

# Unpack bitcode from the library files
mkdir -p work
cd work
for f in libavformat libavcodec libavutil; do
    mkdir -p $f
    (cd $f; ar x ../../$f/$f.a)
done
# Remove duplicate objects - otherwise we get symbol conflicts
rm libavcodec/log2_tab.o libavformat/log2_tab.o
cd ..

# Link the full libs + driver into a single bitcode file
llvm-link${LLVM_SUFFIX} -o build/fromager/driver-main.bc \
    build/fromager/driver.o build/fromager/driver_heap.o work/*/*.o


# Extract objects from some picolibc components, so they can be linked in at
# specific times.
( cd build/fromager; ar x /dev/stdin ) <$PICOLIBC_HOME/lib/libmachine_syscalls.a
( cd build/fromager; ar x /dev/stdin ) <$PICOLIBC_HOME/lib/libmachine_syscalls_native.a
( cd build/fromager; ar x /dev/stdin ) <$PICOLIBC_HOME/lib/libmachine_builtins.a


# MicroRAM LLVM output

do_build() {
    local mode="$1"

    local extra_link=""
    local extra_post_link=""
    if [[ "$mode" == "microram" ]]; then
        extra_link="build/fromager/syscalls.c.o"
        extra_post_link="build/fromager/llvm_intrin.c.o"
    elif [[ "$mode" == "native" ]]; then
        extra_link="build/fromager/syscalls_native.c.o"
        extra_post_link="build/fromager/cc_trace_exec.bc"
    fi

    # Link in the libraries prior to optimizing.  We don't add the driver secrets
    # yet, so the optimizer won't propagate information about them.
    llvm-link${LLVM_SUFFIX} \
        $PICOLIBC_HOME/lib/libc.bc \
        $PICOLIBC_HOME/lib/libm.bc \
        $extra_link \
        --override=build/fromager/driver-main.bc \
        -o build/fromager/driver-$mode-nosecret.bc

    keep_symbols=main
    keep_symbols=$keep_symbols,__llvm__memcpy__p0i8__p0i8__i64
    keep_symbols=$keep_symbols,__llvm__memmove__p0i8__p0i8__i64
    keep_symbols=$keep_symbols,__llvm__memset__p0i8__i64
    keep_symbols=$keep_symbols,__llvm__bswap__i32
    keep_symbols=$keep_symbols,__llvm__ctpop__i32
    keep_symbols=$keep_symbols,__cc_sdiv_i32_i32
    keep_symbols=$keep_symbols,__cc_srem_i32_i32
    keep_symbols=$keep_symbols,__cc_sdiv_i64_i64
    keep_symbols=$keep_symbols,__cc_srem_i64_i64
    if [[ "$mode" == "native" ]]; then
        # Explicitly preserve some libm symbols.  `globaldce` can't see the connection
        # between `llvm.floor.f64` and `floor` and will wrongly remove the latter.
        keep_symbols=$keep_symbols,ceil,floor,trunc,llrint
        keep_symbols=$keep_symbols,exp,exp2,log,pow
        keep_symbols=$keep_symbols,memcpy,memmove,memset
    fi

    # Optimize, removing unused public symbols
    opt${LLVM_SUFFIX} \
        -load ../llvm-passes/passes.so \
        --internalize --internalize-public-api-list="$keep_symbols" \
        $cc_instrument \
        --force-vector-width=1 \
        -O3 --scalarizer -O1 \
        $strip_debug \
        build/fromager/driver-$mode-nosecret.bc \
        -o build/fromager/driver-$mode-nosecret-opt.bc

    # Link the driver code and the secrets.  No more optimizations should be run on
    # the code after this.
    llvm-link${LLVM_SUFFIX} \
        build/fromager/driver-$mode-nosecret-opt.bc \
        build/fromager/driver_secret.bc \
        $extra_post_link \
        -o build/fromager/driver-$mode-full.bc

    opt${LLVM_SUFFIX} \
        build/fromager/driver-$mode-full.bc \
        $strip_debug --globaldce \
        -o build/fromager/driver-$mode-full-nodebug.bc
}

do_build microram
# Disassemble to LLVM's textual IR format
llvm-dis${LLVM_SUFFIX} build/fromager/driver-microram-full-nodebug.bc -o driver-link.ll
# driver-link.bc and driver-link.ll are the final LLVM outputs.
sed -i -e 's/nofree//g' driver-link.ll


do_build native
clang++${LLVM_SUFFIX} \
    -o driver \
    build/fromager/driver-native-full-nodebug.bc

